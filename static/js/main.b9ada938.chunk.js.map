{"version":3,"sources":["components/Card.js","components/CardContainer.js","App.js","index.js"],"names":["Card","image","id","value","onClickHandler","isMatched","disabled","useState","flipFlag","setFlipFlag","className","src","alt","onClick","setTimeout","prevState","CardContainer","props","children","App","Sprites","setSprites","mistakes","setMistake","card1","setCard1","card2","setCard2","setDisabled","randomArray","number","RArray","length","RandomNumber","Math","ceil","random","exist","i","shuffleSprites","array","shuffleLength","pointerForShuffle","shuffleCards","k","fetchPokemons","a","fetch","pokeArray","json","pokedata","urlsPokemon","results","map","url","pokemonSprites","myRandomArray","pointer","pokemonQuery","pokemon","push","sprite","sprites","other","dream_world","front_default","match","ShuffledSprites","useEffect","console","log","prevSprites","endCompare","compareCards","href","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9ada938.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = ({ image, id, value, onClickHandler, isMatched, disabled }) => {\r\n  const [flipFlag, setFlipFlag] = useState(true);\r\n\r\n  const flipHandler = () => {\r\n    if (!disabled) {\r\n      onClickHandler(id, value, isMatched);\r\n      setFlipFlag(!flipFlag);\r\n      if (!isMatched) {\r\n        setTimeout(() => {\r\n          setFlipFlag((prevState) => {\r\n            setFlipFlag(!prevState);\r\n          });\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"scene\">\r\n      <div className={`card ${flipFlag && !isMatched && \"is-flipped\"}`}>\r\n        <div className=\"card__face card__face--front\">\r\n          <img className=\"pokemon\" src={image} alt=\"PokemonSprite\"></img>\r\n        </div>\r\n        <div className=\"card__face card__face--back\" onClick={flipHandler}>\r\n          <div className=\"backcover\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport './cardContainer.css'\r\n\r\nconst CardContainer = (props) => {\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {props.children}     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"./components/Card\";\nimport CardContainer from \"./components/CardContainer\";\n\nfunction App() {\n  const [Sprites, setSprites] = useState([]);\n  const [mistakes, setMistake] = useState(0);\n  const [card1, setCard1] = useState(null);\n  const [card2, setCard2] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  //fetch Pokemons from pokeapis\n  useEffect(() => {\n    fetchPokemons();\n    // eslint-disable-next-line\n  }, []);\n\n  //Compare the cards when card 1 and card 2 has value\n  useEffect(() => {\n    if (card1 && card2) {\n      setDisabled(true);\n      // console.log(card1);\n      // console.log(card2);\n      if (card1.id === card2.id) {\n        console.log(\"its a Match\");\n        setSprites((prevSprites) => {\n          return prevSprites.map((sprite) => {\n            if (sprite.id === card1.id) {\n              return { ...sprite, match: true };\n            } else {\n              return sprite;\n            }\n          });\n        });\n        endCompare();\n      } else {\n        console.log(\"it's not match\");\n        setTimeout(()=> endCompare(), 1000) \n      }\n    }\n    // eslint-disable-next-line\n  }, [card1, card2]);\n\n  function randomArray(number) {\n    let RArray = [];\n    while (RArray.length < number) {\n      let RandomNumber = Math.ceil(Math.random() * number);\n      let exist = false;\n      for (let i = 0; i < RArray.length; i++) {\n        if (RArray[i] === RandomNumber) {\n          exist = true;\n          break;\n        }\n      }\n      if (!exist) {\n        RArray[RArray.length] = RandomNumber;\n      }\n    }\n    //console.log(RArray);\n    return RArray;\n  }\n\n  function shuffleSprites(array) {\n    let shuffleLength = array.length * 2;\n    let pointerForShuffle = randomArray(shuffleLength);\n    let shuffleCards = [];\n    for (let i = 0; i < array.length; i++) {\n      let pointer1 = pointerForShuffle[i];\n      shuffleCards[pointer1] = array[i];\n    }\n\n    for (let k = array.length; k < shuffleLength; k++) {\n      let pointer2 = pointerForShuffle[k];\n      shuffleCards[pointer2] = array[k - array.length];\n    }\n    return shuffleCards;\n  }\n\n  async function fetchPokemons() {\n    const pokeArray = await fetch(\"https://pokeapi.co/api/v2/pokemon?limit=60\");\n    const pokedata = await pokeArray.json();\n    let urlsPokemon = pokedata.results.map((a) => a.url); //object with only Pokemon's URLs\n    let pokemonSprites = []; // Array that will stored the Sprites Urls\n\n    let myRandomArray = randomArray(60);\n    for (let i = 0; i <= 11; i++) {\n      let pointer = myRandomArray[i];\n      const pokemonQuery = await fetch(urlsPokemon[pointer]);\n      const pokemon = await pokemonQuery.json();\n      pokemonSprites.push({\n        id: i,\n        sprite: pokemon.sprites.other.dream_world.front_default,\n        match: false,\n      });\n    }\n    let ShuffledSprites = shuffleSprites(pokemonSprites);\n    //console.log(ShuffledSprites);\n    setSprites(ShuffledSprites);\n    setCard1(null);\n    setCard2(null);\n    setMistake(0);\n  }\n\n  const compareCards = (id, value) => {\n    card1\n      ? setCard2({ value: +value, id: +id })\n      : setCard1({ value: +value, id: +id });\n  };\n\n  const endCompare = () => {\n    setCard1(null);\n    setCard2(null);\n    setMistake((prevState) => prevState + 1);\n    setDisabled(false);\n  };\n\n  return (\n    <div>\n      <p>\n        A Pokemon Memory Game using React and PokéApi (\n        <a href=\"https://pokeapi.co/\">pokeapi.co</a>) Author: Miguel Angel\n        Torres\n      </p>\n      <h1>Pokemon Gotta Catch ‘Em All!</h1>\n\n      <h2>Attemps: {mistakes}</h2>\n\n      <button onClick={fetchPokemons}>Reset Game</button>\n\n      <CardContainer>\n        {Sprites.map((pokemon, index) => (\n          <Card\n            key={index}\n            value={index}\n            image={pokemon.sprite}\n            id={pokemon.id}\n            isMatched={pokemon.match}\n            onClickHandler={compareCards}\n            disabled={disabled}\n          />\n        ))}\n      </CardContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}